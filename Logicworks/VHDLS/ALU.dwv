library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity ALU is
    Port (
        opcodeB : in std_logic_vector(2 downto 0);  -- 3-bit opcode for the operation
        mode    : in std_logic_vector(1 downto 0);  -- Mode selection (used for immediate)
        imm8    : in std_logic_vector(7 downto 0);  -- 8-bit immediate value
        Rn_data : in std_logic_vector(15 downto 0); -- 16-bit Rn data input
        Rm_data : in std_logic_vector(15 downto 0); -- 16-bit Rm data input
        Rd_data : out std_logic_vector(15 downto 0) -- 16-bit Rd data output
    );
end ALU;

architecture Behavioral of ALU is
    constant ZERO8 : std_logic_vector(7 downto 0) := (others => '0');
begin
    process(opcodeB, mode, imm8, Rn_data, Rm_data)
    begin
        case opcodeB is
            when "011" =>  -- Addition and Subtraction Operations
                case mode is
                    when "00" =>  -- Addition: Rd_data <= Rn_data + Rm_data
                        Rd_data <= std_logic_vector(unsigned(Rn_data) + unsigned(Rm_data));
                    when "01" =>  -- Subtraction: Rd_data <= Rn_data - Rm_data
                        Rd_data <= std_logic_vector(unsigned(Rn_data) - unsigned(Rm_data));
                    when "10" =>  -- Addition with Immediate: Rd_data <= Rn_data + Imm(7 downto 0)
                        Rd_data <= std_logic_vector(unsigned(Rn_data) + unsigned(ZERO8 & imm8));
                    when "11" =>  -- Subtraction with Immediate: Rd_data <= Rn_data - Imm(7 downto 0)
                        Rd_data <= std_logic_vector(unsigned(Rn_data) - unsigned(ZERO8 & imm8));
                    when others =>
                        Rd_data <= (others => '0');  -- Default case
                end case;
            when others =>
                Rd_data <= (others => '0');  -- Default case for other opcodeB values
        end case;
    end process;
end Behavioral;
